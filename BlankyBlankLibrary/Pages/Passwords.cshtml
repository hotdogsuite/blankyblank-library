@page "/passwords"
@model BlankyBlankLibrary.Pages.PasswordsModel
@{
    ViewData["Title"] = "Secret Prompts";
}

<h4>Secret Prompts</h4>

<hr>

@if (!Model.ExistingPasswords.Any()) {
    <p class="alert alert-info">
        There are no secret prompts in the database. Get to importing, friend!
    </p>
}

<div class="row" data-masonry>

    <div class="col-4">

        <div class="card border-primary mb-3">

            <h5 class="card-header text-bg-primary">Import / Export</h5>

            <div class="card-body">

                <p class="card-text">
                    Import your stock <code>BlankyBlankPasswords.jet</code> file from your
                    game's installation. The location of your installation will vary but,
                    within the game files, the <code>.jet</code> files should be under
                    <code>games\BlankyBlank\content</code>.
                </p>

                <p class="card-text">
                    <a href="/images/blanky-location.png">
                        <img src="/images/blanky-location.png" alt="BlankyBlank folder structure." class="img-fluid">
                    </a>
                </p>

                <p class="card-text">
                    As with word lists, for the most part, data is left unchanged, but some exceptions are made to
                    massage the data to fit into relational tables.
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">
                            Ignoring null or empty forbidden word entries.
                        </li>
                        <li class="list-group-item">
                            Ignoring tailored words where the list referenced is
                            <code>&lt;place-feel-emotional-simple&gt;</code> as this
                            list does not appear to be in the stock game.
                        </li>
                    </ul>
                </p>

                <hr>

                <form method="post" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label asp-for="IncomingSecretPrompts" class="form-label"></label>
                        <input asp-for="IncomingSecretPrompts" class="form-control">
                    </div>
                    <div class="mb-3">
                        <button type="submit" asp-page-handler="Import" class="btn btn-primary w-100">Import Secret Prompts</button>
                    </div>
                </form>

                <hr>

                <p class="card-text">
                    Export your <code>BlankyBlankPasswords.jet</code> file to replace the one in the
                    game files. Backing up your existing file is strongly encouraged. Worst case; if it breaks,
                    just re-install the game to get back to stock.
                </p>

                <hr>

                <form method="post">
                    <div class="mb-3">
                        <button type="submit" asp-page-handler="Export" class="btn btn-primary w-100">Export Secret Prompts</button>
                    </div>
                </form>
                
            </div>

        </div>

    </div>

    @foreach (var password in Model.ExistingPasswords) {
        <div class="col-4">
            <div class="card mb-3">
                <h6 class="card-header d-flex justify-content-between">
                    <div>@password.Name</div>
                    <div>#@password.Id.ToString("000")</div>
                </h6>
                <div class="card-body">
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">
                            <span class="text-body-tertiary">Difficulty:</span>
                            <span>@password.Difficulty</span>
                        </li>
                        <li class="list-group-item">
                            <span class="text-body-tertiary">Category:</span>
                            <span>@password.Category</span>
                        </li>
                        @if (password.Subcategory != null) {
                            <li class="list-group-item">
                                <span class="text-body-tertiary">Sub-category:</span>
                                <span>@password.Subcategory</span>
                            </li>
                        }
                        <li class="list-group-item">
                            <span class="text-body-tertiary">US-centric:</span>
                            <span>@(password.UsCentric ? "Yes" : "No")</span>
                        </li>
                        <li class="list-group-item">
                            <span class="text-body-tertiary">Alternate Spellings:</span>
                            <span>@password.AlternateSpellings.Count()</span>
                        </li>
                        <li class="list-group-item">
                            <span class="text-body-tertiary">Forbidden Words:</span>
                            <span>@password.ForbiddenWords.Count()</span>
                        </li>
                        <li class="list-group-item">
                            <span class="text-body-tertiary">Tailored Words:</span>
                            <span>@password.TailoredWords.Count()</span>
                        </li>
                        @* @if (password.AlternateSpellings.Any()) {
                            <li class="list-group-item">
                                <div class="text-body-tertiary">Alternate Spellings:</div>
                                <ul class="list-group list-group-flush">
                                    @foreach (var alternateSpelling in password.AlternateSpellings) {
                                        <li class="list-group-item">
                                            @alternateSpelling
                                        </li>
                                    }
                                </ul>
                            </li>
                        }
                        @if (password.ForbiddenWords.Any()) {
                            <li class="list-group-item">
                                <div class="text-body-tertiary">Forbidden Words:</div>
                                <ul class="list-group list-group-flush">
                                    @foreach (var forbiddenWord in password.ForbiddenWords) {
                                        <li class="list-group-item">
                                            @forbiddenWord
                                        </li>
                                    }
                                </ul>
                            </li>
                        }
                        @if (password.TailoredWords.Any()) {
                            <li class="list-group-item">
                                <div class="text-body-tertiary">Tailored Words:</div>
                                <ul class="list-group list-group-flush">
                                    @foreach (var tailoredWord in password.TailoredWords) {
                                        <li class="list-group-item">
                                            @tailoredWord.Word
                                            &lt;@tailoredWord.ListName&gt;
                                        </li>
                                    }
                                </ul>
                            </li>
                        } *@
                    </ul>
                </div>
                <div class="card-footer d-flex justify-content-end">
                    <a asp-page="/PasswordEdit" asp-route-id="@password.Id">
                        <i class="bi bi-pencil"></i>
                    </a>
                </div>
            </div>
        </div>
    }

</div>